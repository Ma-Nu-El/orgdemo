#+TITLE: Git From the Ground Up
#+SETUPFILE: setup.config
#+PROPERTY: header-args :dir ~/org/tmp
#+INCLUDE: code.inc
#+CALL: init()

* Introduction
We're going to learn a little something about the git data model by crafting the
=.git= directory and a blob object by hand. It'll be fun!

* Where are we, and is git happy?
Let's start by seeing where we are, and if we're in a valid git repository.

#+BEGIN_SRC shell
echo "My current working dir is: $(dirs +0)"
git status 2>&1 || echo Git is not happy.
#+END_SRC

#+RESULTS:
#+begin_example
My current working dir is: ~/org/tmp
fatal: not a git repository (or any of the parent directories): .git
Git is not happy.
#+end_example

* Let's create a .git directory
OK, so we know that we need a =.git= directory to start things off. Let's create
one now.

#+BEGIN_SRC shell
mkdir -p .git
git status 2>&1 || echo Git is not happy.
#+END_SRC

#+RESULTS:
#+begin_example
fatal: not a git repository (or any of the parent directories): .git
Git is not happy.
#+end_example

Still not happy, clearly we've got some work to do.

* Let's create some things
Git needs a few things to be happy -- it needs a place to stash objects, a place
to track refs, and a HEAD file which points to our current commit.

#+BEGIN_SRC shell
mkdir -p .git/objects
mkdir -p .git/refs
mkdir -p .git/refs/heads
echo "ref: refs/heads/master" > .git/HEAD
tree .git/
#+END_SRC

#+RESULTS:
#+begin_example
.git/
├── HEAD
├── objects
└── refs
    └── heads

3 directories, 1 file
#+end_example

This is essentially the skeleton we need for git, just three directories and
one file. At this point git should be totally happy, let's verify.

#+BEGIN_SRC shell
git status 2>&1 || echo Git is not happy.
#+END_SRC

#+RESULTS:
#+begin_example
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
#+end_example

OK great, when git is happy, everyone is happy!

* Let's hash something!
We're going to hash the string "call_hello[:results raw]()" by using the git
plumbing command =hash-object=.

#+NAME: hashobject
#+BEGIN_SRC shell
echo -n '<<hello()>>' | git hash-object --stdin -w
#+END_SRC

#+RESULTS: hashobject
#+begin_example
05d5390cf537efeab95b0e80c987b83fc855bca0
#+end_example

So we've asked git to hash the content we passed in via STDIN and we've also
asked it to store it in the object database. It returned a 40 character SHA1 hash
of the content, and if you've ever worked with git before you've likely seen
these. You can also refer to this hash by its first four characters like
call_short_hash(line=hashobject) which is pretty handy.

* Where did git put it?
In the previous example we asked =git hash-object= to write our string the objects
database. Let's see how that was stored in the =.git= directory.

#+BEGIN_SRC shell
tree .git
#+END_SRC

#+RESULTS:
#+begin_example
.git
├── HEAD
├── objects
│   └── 05
│       └── d5390cf537efeab95b0e80c987b83fc855bca0
└── refs
    └── heads

4 directories, 2 files
#+end_example

Because file systems get angry with you when you stash too many files in the same
directory, git shards the directory based on the first two bytes of the hash.

* Can we just look at the object?
Let's see if we can find part of the string we hashed inside the object.

#+BEGIN_SRC shell
grep -F <<first_word(line=hello())>> <<hash_to_dir(line=hashobject)>> || echo Nope.
#+END_SRC

#+RESULTS:
#+begin_example
Nope.
#+end_example

Nope. Git stores the objects in compressed format, but we can use =git cat-file=
to take a peek inside it. We'll run it with the =-p= argument to pretty-print the
object. We'll also reference the object by its short name, because typing long
git hashes is no fun!

#+NAME: myhello
#+BEGIN_SRC shell
git cat-file -p <<short_hash(line=hashobject)>>
#+END_SRC

#+RESULTS: myhello
#+begin_example
Welcome to SeaGL 2019!
#+end_example

* Let's do it ourselves
OK, let's figure out how git compresses the file.

#+BEGIN_SRC shell
cat <<hash_to_dir(line=hashobject)>> | file -
cat <<hash_to_dir(line=hashobject)>> | gunzip || echo Nope.
#+END_SRC

#+RESULTS:
#+begin_example
/dev/stdin: VAX COFF executable - version 19790
Nope.
#+end_example

Neither =file= or =gunzip= no quite what to make of it. I happen to know that it's a =zlib=
stream. The program =pigz= can deal with these.

#+BEGIN_SRC shell
cat <<hash_to_dir(line=hashobject)>> | pigz -d | hexdump -C
#+END_SRC

#+RESULTS:
#+begin_example
00000000  62 6c 6f 62 20 32 32 00  57 65 6c 63 6f 6d 65 20  |blob 22.Welcome |
00000010  74 6f 20 53 65 61 47 4c  20 32 30 31 39 21        |to SeaGL 2019!|
0000001e
#+end_example

We can see from the hex output that git is storing our hashed string with a
header, which contains =blob= which is the type of thing we're storing, followed
by call_strlen(line=myhello), which is the number of bytes of the thing we're
storing, followed by a null byte.

Since we're doing things from the ground up, let's hash it ourselves using
Python.

#+BEGIN_SRC python
import hashlib
hashme = '<<hello()>>'
header = "blob " + str(len(hashme)) + "\0"
myblob = (header + hashme).encode('utf8')
gitsha = hashlib.sha1(myblob).hexdigest()

print(gitsha)
#+END_SRC

#+RESULTS:
#+begin_example
05d5390cf537efeab95b0e80c987b83fc855bca0
#+end_example

So now we've figured out how to hash the string like git would, now we just need
to compress it and save it. First let's get rid of the object we previously
created.

#+BEGIN_SRC shell :exports code
rm <<hash_to_dir(line=hashobject)>> && echo "OK."
#+END_SRC

#+RESULTS:
#+begin_example
OK.
#+end_example

Here we go, this will be much like the previous program except now
it will compress and then save the file!

#+BEGIN_SRC python
import hashlib, zlib
hashme = '<<hello()>>'
header = "blob " + str(len(hashme)) + "\0"
myblob = (header + hashme).encode('utf8')
gitsha = hashlib.sha1(myblob).hexdigest()
# Calculate filename
gitobj = f".git/objects/{gitsha[:2]}/{gitsha[2:]}"
# Write out the binary bytes!
myfile = open(gitobj, 'wb')
myfile.write(zlib.compress(myblob))
myfile.close()
print(f"wrote: {gitobj}")
#+END_SRC

#+RESULTS:
#+begin_example
wrote: .git/objects/05/d5390cf537efeab95b0e80c987b83fc855bca0
#+end_example

* Did it work?
Now let's use =git cat-file= to verify that our program did everything
right.

#+BEGIN_SRC shell
git cat-file -p <<short_hash(line=hashobject)>>
#+END_SRC

#+RESULTS:
#+begin_example
Welcome to SeaGL 2019!
#+end_example

* Final thoughts
In a future post, I'll show how we can use similar techniques to craft
git trees and commits. See ya then!
